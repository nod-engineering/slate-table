{"version":3,"sources":["../src/utils.js"],"names":["checkTableIsExist","editor","table","cells","Array","from","Editor","nodes","at","match","n","type","length","isTableElement","isInSameTable","selection","edges","start","end","startTable","endTable","startPath","endPath","Path","equals","get","obj","path","defaultValue","undefined","travel","regexp","String","prototype","split","call","filter","Boolean","reduce","res","key","result","getNode","node","i","p","Text","isText","children"],"mappings":"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","sourcesContent":["import { Editor, Path, Text } from 'slate';\n\nexport function checkTableIsExist(editor, table) {\n  const cells = Array.from(\n    Editor.nodes(editor, {\n      at: table[1],\n      match: n => n.type === 'table-cell',\n    }),\n  );\n\n  return !!cells.length;\n}\n\nexport function isTableElement(type) {\n  return (\n    type === 'table' || type === 'table-row' || type === 'table-cell' || type === 'table-content'\n  );\n}\n\nexport function isInSameTable(editor) {\n  if (!editor.selection) return false;\n\n  const [start, end] = Editor.edges(editor, editor.selection);\n  const [startTable] = Editor.nodes(editor, {\n    at: start,\n    match: n => n.type === 'table',\n  });\n\n  const [endTable] = Editor.nodes(editor, {\n    at: end,\n    match: n => n.type === 'table',\n  });\n\n  if (startTable && endTable) {\n    const [, startPath] = startTable;\n    const [, endPath] = endTable;\n\n    if (Path.equals(startPath, endPath)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function get(obj, path, defaultValue = undefined) {\n  const travel = regexp =>\n    String.prototype.split\n      .call(path, regexp)\n      .filter(Boolean)\n      .reduce((res, key) => (res !== null && res !== undefined ? res[key] : res), obj);\n  const result = travel(/[,[\\]]+?/) || travel(/[,[\\].]+?/);\n  return result === undefined || result === obj ? defaultValue : result;\n}\n\nexport const getNode = (editor, path) => {\n  let node = editor;\n\n  for (let i = 0; i < path.length; i += 1) {\n    const p = path[i];\n\n    if (Text.isText(node) || !node.children[p]) {\n      return undefined;\n    }\n\n    node = node.children[p];\n  }\n\n  return node;\n};\n"],"file":"utils.js"}