{"version":3,"sources":["../../src/commands/mergeSelection.js"],"names":["checkMerge","table","startCell","direction","startCellKey","key","selectedTable","startCellKeyIndexInTable","isMergeDown","forEach","row","findIndex","obj","cell","colspan","length","colRow","index","push","rowspan","mergeSelection","editor","selection","Editor","edges","start","nodes","match","n","type","at","startNode","gridTable","downIndex","insertPositionCol","tmpContent","col","isReal","node","string","children","Transforms","removeNodes","setNodes","height","width","rows","minRowHeight","Infinity","mergedGridTable","idx","allColumnIsReal","minColWidth","j","originPath","insertContents","Object","values","content","insertNodes","end"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint-disable consistent-return */\nimport { Editor, Transforms } from 'slate';\nimport { splitedTable } from '../selection';\n\nexport function checkMerge(table, startCell, direction) {\n  const startCellKey = startCell[0].key;\n  const selectedTable = [[]];\n  let startCellKeyIndexInTable = -1;\n  const isMergeDown = direction === 'down';\n  table.forEach(row => {\n    startCellKeyIndexInTable = isMergeDown && startCellKeyIndexInTable !== -1 ? startCellKeyIndexInTable : row.findIndex(obj => obj.cell.key === startCellKey);\n    if (direction === 'right') {\n      const colspan = selectedTable[0][0] && selectedTable[0][0].cell.colspan || 0;\n      if (startCellKeyIndexInTable !== -1 && row.length > startCellKeyIndexInTable + 1) {\n        let colspan = 0;\n        row.forEach((colRow, index) => {\n          colspan = selectedTable[0][0] && selectedTable[0][0].cell.colspan || 0;\n          if (index < startCellKeyIndexInTable) return;\n          if (selectedTable.length === 1 && selectedTable[0].length === 0) {\n            selectedTable[0].push(colRow);\n          } else if((colspan === 0 && selectedTable[0].length < 2) || selectedTable[0].length <= colspan) {\n            selectedTable[0].push(colRow);\n          }\n        })\n      }\n    }\n    if (isMergeDown) {\n      if (startCellKeyIndexInTable !== -1) {\n        const rowspan = selectedTable[0][0] && selectedTable[0][0].cell.rowspan || 0;\n        if (selectedTable.length === 1 && selectedTable[0].length === 0) {\n          selectedTable[0].push(row[startCellKeyIndexInTable]);\n        } else if((rowspan === 0 && selectedTable.length < 2) || selectedTable.length <= rowspan) {\n          selectedTable.push([row[startCellKeyIndexInTable]]);\n        }\n      }\n    }\n  });\n  return selectedTable;\n}\n\n\nconst mergeSelection = (table, editor, direction = 'right') => {\n  if (!table || !editor.selection) return;\n  const [start] = Editor.edges(editor, editor.selection);\n  const [startNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: start,\n  });\n  const { key } = startNode[0];\n  const { gridTable } = splitedTable(editor, table, key);\n  const [startCell] = Editor.nodes(editor, {\n    match: n => n.key === key,\n    at: [],\n  });\n\n  if (!startCell) return;\n  const isMergeDown = direction === 'down';\n  const selectedTable = checkMerge(gridTable, startCell, direction);\n  if (!selectedTable) return;\n  const downIndex = selectedTable.length - 1;\n  const insertPositionCol = isMergeDown ? selectedTable[downIndex][0] : selectedTable[0][selectedTable[0].length -1];\n  const tmpContent = {};\n\n  gridTable.forEach((row) => {\n    row.forEach((col) => {\n      if (col.cell.key === insertPositionCol.cell.key &&\n        col.isReal\n      ) {\n        const [node] = Editor.nodes(editor, {\n          match: n => n.key === col.cell.key,\n          at: [],\n        });\n        if (node) {\n          if (Editor.string(editor, node[1])) {\n            tmpContent[col.cell.key] = node[0].children;\n          }\n\n          Transforms.removeNodes(editor, {\n            at: table[1],\n            match: n => n.key === col.cell.key,\n          });\n        }\n      }\n    });\n  });\n  Transforms.setNodes(\n    editor,\n    {\n      height: 0,\n      width: 0,\n      colspan: selectedTable[0].length,\n      rowspan: selectedTable.length,\n    },\n    {\n      at: table[1],\n      match: n => n.key === selectedTable[0][0].cell.key,\n    },\n  );\n\n  Transforms.removeNodes(editor, {\n    at: table[1],\n    match: n => {\n      if (n.type !== 'table_row') {\n        return false;\n      }\n\n      if (\n        !n.children ||\n        n.children.findIndex((cell) => cell.type === 'table_cell') < 0\n      ) {\n        return true;\n      }\n\n      return false;\n    },\n  });\n\n  const rows = Editor.nodes(editor, {\n    at: table[1],\n    match: n => n.type === 'table_row',\n  });\n\n  for (const row of rows) {\n    let minRowHeight = Infinity;\n    // eslint-disable-next-line no-loop-func\n    row[0].children.forEach((cell) => {\n      const { rowspan = 1 } = cell;\n      if (rowspan < minRowHeight) {\n        minRowHeight = rowspan;\n      }\n    });\n\n    if (minRowHeight > 1 && minRowHeight < Infinity) {\n      row[0].children.forEach((cell) => {\n        Transforms.setNodes(\n          editor,\n          {\n            height: 0,\n            width: 0,\n            rowspan: (cell.rowspan || 1) - minRowHeight + 1,\n          },\n          {\n            at: table[1],\n            match: n => n.key === cell.key,\n          },\n        );\n      });\n    }\n  }\n  const { gridTable: mergedGridTable } = splitedTable(editor, table);\n  for (let idx = 0; idx < mergedGridTable[0].length; idx += 1) {\n    let allColumnIsReal = true;\n    let minColWidth = Infinity;\n\n    for (let j = 0; j < mergedGridTable.length; j += 1) {\n      // eslint-disable-next-line no-continue\n      if (!mergedGridTable[j][idx]) continue;\n\n      if (!mergedGridTable[j][idx].isReal) {\n        allColumnIsReal = false;\n      } else {\n        const { colspan = 1 } = mergedGridTable[j][idx].cell;\n        if (colspan < minColWidth) {\n          minColWidth = colspan;\n        }\n      }\n    }\n\n    if (allColumnIsReal && minColWidth < Infinity && minColWidth > 1) {\n      for (let j = 0; j < mergedGridTable.length; j += 1) {\n        const { cell } = mergedGridTable[j][idx];\n        Transforms.setNodes(\n          editor,\n          {\n            height: 0,\n            width: 0,\n            colspan: (cell.colspan || 1) - minColWidth + 1,\n          },\n          {\n            at: table[1],\n            match: n => n.key === cell.key,\n          },\n        );\n      }\n    }\n  }\n\n  const [insertContents] = Editor.nodes(editor, {\n    at: selectedTable[0][0].originPath,\n    match: n => n.type === 'paragraph',\n  });\n  Object.values(tmpContent).forEach(content => {\n    if (content[0] && content[0].children) {\n      Transforms.insertNodes(editor, content[0].children, {\n        at: Editor.end(editor, insertContents[1]),\n      });\n    }\n  });\n}\n\nexport default mergeSelection;"],"file":"mergeSelection.js"}