{"version":3,"sources":["../../src/commands/insertBelow.js"],"names":["insertBelow","table","editor","selection","yIndex","length","gridTable","getCol","Editor","nodes","match","n","type","startCell","c","cell","key","isReal","insertPositionCol","checkInsertEnable","insertCols","Map","y","path","rowspan","forEach","col","originCol","set","newRow","size","values","value","index","children","colspan","i","Transforms","insertNodes","at","Path","next"],"mappings":"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","sourcesContent":["import { Editor, Transforms, Path } from 'slate';\nimport { splitedTable } from '../selection';\nimport { createRow } from '../creator';\n\nconst insertBelow = (table, editor) => {\n  const { selection } = editor;\n  if (!selection || !table) return;\n\n  const yIndex = table[1].length;\n\n  const { gridTable, getCol } = splitedTable(editor, table);\n\n  const [startCell] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n  });\n\n  const [insertPositionCol] = getCol(\n    (c) => c.cell.key === startCell[0].key && c.isReal,\n  );\n\n  let checkInsertEnable = true;\n  const insertCols = new Map();\n\n  const y =\n    insertPositionCol.path[yIndex] + (insertPositionCol.cell.rowspan || 1) - 1;\n\n  gridTable[y].forEach((col) => {\n    const [originCol] = getCol(\n      (n) => n.isReal && n.cell.key === col.cell.key,\n    );\n\n    const { cell, path } = originCol;\n\n    if (!gridTable[y + 1]) {\n      insertCols.set(cell.key, originCol);\n    } else if (path[yIndex] + (cell.rowspan || 1) - 1 === y) {\n      insertCols.set(cell.key, originCol);\n    } else {\n      checkInsertEnable = false;\n    }\n  });\n\n  if (!checkInsertEnable) {\n    return;\n  }\n\n  const newRow = createRow(insertCols.size);\n\n  [...insertCols.values()].forEach((value, index) => {\n    newRow.children[index].colspan = value.cell.colspan || 1;\n  });\n\n  const [[, path]] = Editor.nodes(editor, {\n    match: n => n.type === 'table_row',\n  });\n\n  for (let i = 1; i < startCell[0].rowspan; i += 1) {\n    path[yIndex] += 1;\n  }\n\n  Transforms.insertNodes(editor, newRow, {\n    at: Path.next(path),\n  });\n}\n\nexport default insertBelow;\n"],"file":"insertBelow.js"}