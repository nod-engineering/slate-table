{"version":3,"sources":["../../src/commands/toggleParentRow.js"],"names":["transformNode","editor","path","selected","isParent","Transforms","setNodes","subParent","at","parent","toggleParentRow","table","row","type","selection","nodes","Editor","match","n","node","rows","length","isHighlightedRow","children","every","selectedCell"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAA0C;AAAA,MAAvCC,MAAuC,QAAvCA,MAAuC;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC9D,MAAIA,QAAJ,EAAc;AACZ,QAAI,CAACD,QAAL,EAAe;AACbE,wBAAWC,QAAX,CAAoBL,MAApB,EAA4B;AAAEM,QAAAA,SAAS,EAAEJ;AAAb,OAA5B,EAAqD;AAAEK,QAAAA,EAAE,EAAEN;AAAN,OAArD;AACD;;AACDG,sBAAWC,QAAX,CAAoBL,MAApB,EAA4B;AAAEQ,MAAAA,MAAM,EAAEN;AAAV,KAA5B,EAAkD;AAAEK,MAAAA,EAAE,EAAEN;AAAN,KAAlD;AACD,GALD,MAKO;AACLG,sBAAWC,QAAX,CAAoBL,MAApB,EAA4B;AAAEM,MAAAA,SAAS,EAAEJ;AAAb,KAA5B,EAAqD;AAAEK,MAAAA,EAAE,EAAEN;AAAN,KAArD;AACD;AACF,CATD;;AAUA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,QAA4C;AAAA,MAAzCC,KAAyC,SAAzCA,KAAyC;AAAA,MAAlCV,MAAkC,SAAlCA,MAAkC;AAAA,MAA1BE,QAA0B,SAA1BA,QAA0B;AAAA,MAAhBS,GAAgB,SAAhBA,GAAgB;AAAA,MAAXC,IAAW,SAAXA,IAAW;AAAA,MAC1DC,SAD0D,GAC5Cb,MAD4C,CAC1Da,SAD0D;AAElE,MAAI,CAACH,KAAD,IAAU,CAACG,SAAf,EAA0B;;AAC1B,MAAMC,KAAK,GAAGC,cAAOD,KAAP,CAAad,MAAb,EAAqB;AACjCO,IAAAA,EAAE,EAAEG,KAAK,CAAC,CAAD,CADwB;AAEjCM,IAAAA,KAAK,EAAE,eAACC,CAAD;AAAA,aAAOA,CAAC,CAACL,IAAF,KAAW,WAAlB;AAAA;AAF0B,GAArB,CAAd;;AAIA,MAAMT,QAAQ,GAAGS,IAAI,KAAK,QAA1B;;AAPkE,6CAQ/CE,KAR+C;AAAA;;AAAA;AAQlE,wDAA0B;AAAA,UAAfI,IAAe;;AAAA,iCACHA,IADG;AAAA,UACjBC,IADiB;AAAA,UACXlB,IADW;;AAExB,UAAI,CAAC,gBAAIkB,IAAJ,EAAU,UAAV,EAAsB,EAAtB,EAA0BC,MAA/B,EAAuC;AACvC,UAAMC,gBAAgB,GAAGF,IAAI,CAACG,QAAL,CAAcC,KAAd,CACvB;AAAA,YAAGC,YAAH,SAAGA,YAAH;AAAA,eAAsBA,YAAtB;AAAA,OADuB,CAAzB;;AAGA,UAAIH,gBAAJ,EAAsB;AACpBtB,QAAAA,aAAa,CAAC;AAAEC,UAAAA,MAAM,EAANA,MAAF;AAAUC,UAAAA,IAAI,EAAJA,IAAV;AAAgBC,UAAAA,QAAQ,EAARA,QAAhB;AAA0BC,UAAAA,QAAQ,EAARA;AAA1B,SAAD,CAAb;AACD;;AACD,UAAI,CAACkB,gBAAD,IAAqBV,GAAzB,EAA8B;AAAA,kCACXA,GADW;AAAA,YACnBV,KADmB;;AAE5BF,QAAAA,aAAa,CAAC;AAAEC,UAAAA,MAAM,EAANA,MAAF;AAAUC,UAAAA,IAAI,EAAJA,KAAV;AAAgBC,UAAAA,QAAQ,EAARA,QAAhB;AAA0BC,UAAAA,QAAQ,EAARA;AAA1B,SAAD,CAAb;AACD;AACF;AArBiE;AAAA;AAAA;AAAA;AAAA;AAsBnE,CAtBD;;eAwBeM,e","sourcesContent":["import { Transforms, Editor } from \"slate\";\nimport { get } from \"../utils\";\n\nconst transformNode = ({ editor, path, selected, isParent }) => {\n  if (isParent) {\n    if (!selected) {\n      Transforms.setNodes(editor, { subParent: selected }, { at: path });\n    }\n    Transforms.setNodes(editor, { parent: selected }, { at: path });\n  } else {\n    Transforms.setNodes(editor, { subParent: selected }, { at: path });\n  }\n};\nconst toggleParentRow = ({ table, editor, selected, row, type }) => {\n  const { selection } = editor;\n  if (!table || !selection) return;\n  const nodes = Editor.nodes(editor, {\n    at: table[1],\n    match: (n) => n.type === \"table_row\",\n  });\n  const isParent = type === \"parent\";\n  for (const node of nodes) {\n    const [rows, path] = node;\n    if (!get(rows, \"children\", []).length) return;\n    const isHighlightedRow = rows.children.every(\n      ({ selectedCell }) => selectedCell\n    );\n    if (isHighlightedRow) {\n      transformNode({ editor, path, selected, isParent });\n    }\n    if (!isHighlightedRow && row) {\n      const [, path] = row;\n      transformNode({ editor, path, selected, isParent });\n    }\n  }\n};\n\nexport default toggleParentRow;\n"],"file":"toggleParentRow.js"}