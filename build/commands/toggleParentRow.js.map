{"version":3,"sources":["../../src/commands/toggleParentRow.js"],"names":["toggleParentRow","table","editor","selected","row","selection","nodes","Editor","at","match","n","type","path","Transforms","setNodes","parent","node","rows","length","children","cell","parentRow","subParent","console","log"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAAsC;AAAA,MAAnCC,KAAmC,QAAnCA,KAAmC;AAAA,MAA5BC,MAA4B,QAA5BA,MAA4B;AAAA,MAApBC,QAAoB,QAApBA,QAAoB;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAAA,MACpDC,SADoD,GACtCH,MADsC,CACpDG,SADoD;AAE5D,MAAI,CAACJ,KAAD,IAAU,CAACI,SAAf,EAA0B;;AAC1B,MAAMC,KAAK,GAAGC,cAAOD,KAAP,CAAaJ,MAAb,EAAqB;AACjCM,IAAAA,EAAE,EAAEP,KAAK,CAAC,CAAD,CADwB;AAEjCQ,IAAAA,KAAK,EAAE,eAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,IAAF,KAAW,WAAlB;AAAA;AAF0B,GAArB,CAAd;;AAKA,MAAIP,GAAJ,EAAS;AAAA,8BACUA,GADV;AAAA,QACEQ,IADF;;AAEPC,sBAAWC,QAAX,CAAoBZ,MAApB,EAA4B;AAAEa,MAAAA,MAAM,EAAEZ;AAAV,KAA5B,EAAkD;AAAEK,MAAAA,EAAE,EAAEI;AAAN,KAAlD;AACD;;AAX2D,6CAYzCN,KAZyC;AAAA;;AAAA;AAY5D,wDAA0B;AAAA,UAAfU,IAAe;;AAAA,iCACHA,IADG;AAAA,UACjBC,IADiB;AAAA,UACXL,KADW;;AAExB,UAAI,CAAC,gBAAIK,IAAJ,EAAU,UAAV,EAAsB,EAAtB,EAA0BC,MAA/B,EAAuC;;AAFf,kDAGLD,IAAI,CAACE,QAHA;AAAA;;AAAA;AAGxB,+DAAkC;AAAA,cAAvBC,IAAuB;;AAChC,cAAI,gBAAIA,IAAJ,EAAU,cAAV,CAAJ,EAA+B;AAC7B,gBAAMC,SAAS,GAAG,gBAAIJ,IAAJ,EAAU,QAAV,EAAoB,IAApB,CAAlB;;AACA,gBAAII,SAAS,IAAI,gBAAIA,SAAJ,EAAe,IAAf,MAAyB,gBAAIlB,QAAJ,EAAc,IAAd,CAA1C,EAA+D;AAC7DU,gCAAWC,QAAX,CAAoBZ,MAApB,EAA4B;AAAEoB,gBAAAA,SAAS,EAAEnB;AAAb,eAA5B,EAAqD;AAAEK,gBAAAA,EAAE,EAAEI;AAAN,eAArD;AACD,aAFD,MAEO;AACLW,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BrB,QAA5B;;AACAU,gCAAWC,QAAX,CAAoBZ,MAApB,EAA4B;AAAEa,gBAAAA,MAAM,EAAEZ;AAAV,eAA5B,EAAkD;AAAEK,gBAAAA,EAAE,EAAEI;AAAN,eAAlD;AACD;AACF;AACF;AAbuB;AAAA;AAAA;AAAA;AAAA;AAczB;AA1B2D;AAAA;AAAA;AAAA;AAAA;AA2B7D,CA3BD;;eA6BeZ,e","sourcesContent":["import { Transforms, Editor } from \"slate\";\nimport { get } from \"../utils\";\n\nconst toggleParentRow = ({ table, editor, selected, row }) => {\n  const { selection } = editor;\n  if (!table || !selection) return;\n  const nodes = Editor.nodes(editor, {\n    at: table[1],\n    match: (n) => n.type === \"table_row\",\n  });\n\n  if (row) {\n    const [, path] = row;\n    Transforms.setNodes(editor, { parent: selected }, { at: path });\n  }\n  for (const node of nodes) {\n    const [rows, path] = node;\n    if (!get(rows, \"children\", []).length) return;\n    for (const cell of rows.children) {\n      if (get(cell, \"selectedCell\")) {\n        const parentRow = get(rows, \"parent\", null);\n        if (parentRow && get(parentRow, \"id\") !== get(selected, \"id\")) {\n          Transforms.setNodes(editor, { subParent: selected }, { at: path });\n        } else {\n          console.log(\"set selected\", selected);\n          Transforms.setNodes(editor, { parent: selected }, { at: path });\n        }\n      }\n    }\n  }\n};\n\nexport default toggleParentRow;\n"],"file":"toggleParentRow.js"}