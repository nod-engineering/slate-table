{"version":3,"sources":["../../src/commands/toggleParentRow.js"],"names":["transformNode","editor","path","selected","isParent","Transforms","setNodes","subParent","at","parent","toggleParentRow","table","rows","type","selection","length","row","ReactEditor","findPath","nodes","Editor","match","n","node","nodeRows","isHighlightedRow","children","every","selectedCell"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAA0C;AAAA,MAAvCC,MAAuC,QAAvCA,MAAuC;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC9D,MAAIA,QAAJ,EAAc;AACZ,QAAI,CAACD,QAAL,EAAe;AACbE,wBAAWC,QAAX,CAAoBL,MAApB,EAA4B;AAAEM,QAAAA,SAAS,EAAEJ;AAAb,OAA5B,EAAqD;AAAEK,QAAAA,EAAE,EAAEN;AAAN,OAArD;AACD;;AACDG,sBAAWC,QAAX,CAAoBL,MAApB,EAA4B;AAAEQ,MAAAA,MAAM,EAAEN;AAAV,KAA5B,EAAkD;AAAEK,MAAAA,EAAE,EAAEN;AAAN,KAAlD;AACD,GALD,MAKO;AACLG,sBAAWC,QAAX,CAAoBL,MAApB,EAA4B;AAAEM,MAAAA,SAAS,EAAEJ;AAAb,KAA5B,EAAqD;AAAEK,MAAAA,EAAE,EAAEN;AAAN,KAArD;AACD;AACF,CATD;;AAUA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,QAA6C;AAAA,MAA1CC,KAA0C,SAA1CA,KAA0C;AAAA,MAAnCV,MAAmC,SAAnCA,MAAmC;AAAA,MAA3BE,QAA2B,SAA3BA,QAA2B;AAAA,MAAjBS,IAAiB,SAAjBA,IAAiB;AAAA,MAAXC,IAAW,SAAXA,IAAW;AAAA,MAC3DC,SAD2D,GAC7Cb,MAD6C,CAC3Da,SAD2D;AAEnE,MAAI,CAACH,KAAD,IAAU,CAACG,SAAf,EAA0B;AAC1B,MAAMV,QAAQ,GAAGS,IAAI,KAAK,QAA1B;;AACA,MAAID,IAAI,IAAIA,IAAI,CAACG,MAAjB,EAAyB;AAAA,+CACLH,IADK;AAAA;;AAAA;AACvB,0DAAwB;AAAA,YAAbI,GAAa;AACtB,YAAMd,IAAI,GAAGe,WAAW,CAACC,QAAZ,CAAqBjB,MAArB,EAA6Be,GAA7B,CAAb;AACAhB,QAAAA,aAAa,CAAC;AAAEC,UAAAA,MAAM,EAANA,MAAF;AAAUC,UAAAA,IAAI,EAAJA,IAAV;AAAgBC,UAAAA,QAAQ,EAARA,QAAhB;AAA0BC,UAAAA,QAAQ,EAARA;AAA1B,SAAD,CAAb;AACD;AAJsB;AAAA;AAAA;AAAA;AAAA;AAKxB,GALD,MAKO;AACL,QAAMe,KAAK,GAAGC,cAAOD,KAAP,CAAalB,MAAb,EAAqB;AACjCO,MAAAA,EAAE,EAAEG,KAAK,CAAC,CAAD,CADwB;AAEjCU,MAAAA,KAAK,EAAE,eAACC,CAAD;AAAA,eAAOA,CAAC,CAACT,IAAF,KAAW,WAAlB;AAAA;AAF0B,KAArB,CAAd;;AADK,gDAKcM,KALd;AAAA;;AAAA;AAKL,6DAA0B;AAAA,YAAfI,IAAe;;AAAA,mCACCA,IADD;AAAA,YACjBC,QADiB;AAAA,YACPtB,KADO;;AAExB,YAAI,CAAC,gBAAIsB,QAAJ,EAAc,UAAd,EAA0B,EAA1B,EAA8BT,MAAnC,EAA2C;AAC3C,YAAMU,gBAAgB,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CACvB;AAAA,cAAGC,YAAH,SAAGA,YAAH;AAAA,iBAAsBA,YAAtB;AAAA,SADuB,CAAzB;;AAGA,YAAIH,gBAAJ,EAAsB;AACpBzB,UAAAA,aAAa,CAAC;AAAEC,YAAAA,MAAM,EAANA,MAAF;AAAUC,YAAAA,IAAI,EAAJA,KAAV;AAAgBC,YAAAA,QAAQ,EAARA,QAAhB;AAA0BC,YAAAA,QAAQ,EAARA;AAA1B,WAAD,CAAb;AACD;AACF;AAdI;AAAA;AAAA;AAAA;AAAA;AAeN;AACF,CAzBD;;eA2BeM,e","sourcesContent":["import { Transforms, Editor } from \"slate\";\nimport { get } from \"../utils\";\n\nconst transformNode = ({ editor, path, selected, isParent }) => {\n  if (isParent) {\n    if (!selected) {\n      Transforms.setNodes(editor, { subParent: selected }, { at: path });\n    }\n    Transforms.setNodes(editor, { parent: selected }, { at: path });\n  } else {\n    Transforms.setNodes(editor, { subParent: selected }, { at: path });\n  }\n};\nconst toggleParentRow = ({ table, editor, selected, rows, type }) => {\n  const { selection } = editor;\n  if (!table || !selection) return;\n  const isParent = type === \"parent\";\n  if (rows && rows.length) {\n    for (const row of rows) {\n      const path = ReactEditor.findPath(editor, row);\n      transformNode({ editor, path, selected, isParent });\n    }\n  } else {\n    const nodes = Editor.nodes(editor, {\n      at: table[1],\n      match: (n) => n.type === \"table_row\",\n    });\n    for (const node of nodes) {\n      const [nodeRows, path] = node;\n      if (!get(nodeRows, \"children\", []).length) return;\n      const isHighlightedRow = nodeRows.children.every(\n        ({ selectedCell }) => selectedCell\n      );\n      if (isHighlightedRow) {\n        transformNode({ editor, path, selected, isParent });\n      }\n    }\n  }\n};\n\nexport default toggleParentRow;\n"],"file":"toggleParentRow.js"}