{"version":3,"sources":["../../src/commands/toggleParentRow.js"],"names":["toggleParentRow","table","editor","selected","row","type","selection","nodes","Editor","at","match","n","isParent","path","Transforms","setNodes","subParent","parent","node","rows","length","children","cell","parentRow"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAA4C;AAAA,MAAzCC,KAAyC,QAAzCA,KAAyC;AAAA,MAAlCC,MAAkC,QAAlCA,MAAkC;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,GAAgB,QAAhBA,GAAgB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAAA,MAC1DC,SAD0D,GAC5CJ,MAD4C,CAC1DI,SAD0D;AAElE,MAAI,CAACL,KAAD,IAAU,CAACK,SAAf,EAA0B;;AAC1B,MAAMC,KAAK,GAAGC,cAAOD,KAAP,CAAaL,MAAb,EAAqB;AACjCO,IAAAA,EAAE,EAAER,KAAK,CAAC,CAAD,CADwB;AAEjCS,IAAAA,KAAK,EAAE,eAACC,CAAD;AAAA,aAAOA,CAAC,CAACN,IAAF,KAAW,WAAlB;AAAA;AAF0B,GAArB,CAAd;;AAIA,MAAMO,QAAQ,GAAGP,IAAI,KAAK,QAA1B;;AACA,MAAID,GAAJ,EAAS;AAAA,8BACUA,GADV;AAAA,QACES,IADF;;AAEP,QAAID,QAAJ,EAAc;AACZ,UAAI,CAACT,QAAL,EAAe;AACbW,0BAAWC,QAAX,CAAoBb,MAApB,EAA4B;AAAEc,UAAAA,SAAS,EAAEb;AAAb,SAA5B,EAAqD;AAAEM,UAAAA,EAAE,EAAEI;AAAN,SAArD;AACD;;AACDC,wBAAWC,QAAX,CAAoBb,MAApB,EAA4B;AAAEe,QAAAA,MAAM,EAAEd;AAAV,OAA5B,EAAkD;AAAEM,QAAAA,EAAE,EAAEI;AAAN,OAAlD;AACD,KALD,MAKO;AACLC,wBAAWC,QAAX,CAAoBb,MAApB,EAA4B;AAAEc,QAAAA,SAAS,EAAEb;AAAb,OAA5B,EAAqD;AAAEM,QAAAA,EAAE,EAAEI;AAAN,OAArD;AACD;AACF;;AAlBiE,6CAmB/CN,KAnB+C;AAAA;;AAAA;AAmBlE,wDAA0B;AAAA,UAAfW,IAAe;;AAAA,iCACHA,IADG;AAAA,UACjBC,IADiB;AAAA,UACXN,KADW;;AAExB,UAAI,CAAC,gBAAIM,IAAJ,EAAU,UAAV,EAAsB,EAAtB,EAA0BC,MAA/B,EAAuC;;AAFf,kDAGLD,IAAI,CAACE,QAHA;AAAA;;AAAA;AAGxB,+DAAkC;AAAA,cAAvBC,IAAuB;;AAChC,cAAI,gBAAIA,IAAJ,EAAU,cAAV,CAAJ,EAA+B;AAC7B,gBAAMC,SAAS,GAAG,gBAAIJ,IAAJ,EAAU,QAAV,EAAoB,IAApB,CAAlB;;AACA,gBAAII,SAAS,IAAI,gBAAIA,SAAJ,EAAe,IAAf,MAAyB,gBAAIpB,QAAJ,EAAc,IAAd,CAA1C,EAA+D;AAC7DW,gCAAWC,QAAX,CAAoBb,MAApB,EAA4B;AAAEc,gBAAAA,SAAS,EAAEb;AAAb,eAA5B,EAAqD;AAAEM,gBAAAA,EAAE,EAAEI;AAAN,eAArD;AACD,aAFD,MAEO;AACLC,gCAAWC,QAAX,CAAoBb,MAApB,EAA4B;AAAEe,gBAAAA,MAAM,EAAEd;AAAV,eAA5B,EAAkD;AAAEM,gBAAAA,EAAE,EAAEI;AAAN,eAAlD;AACD;AACF;AACF;AAZuB;AAAA;AAAA;AAAA;AAAA;AAazB;AAhCiE;AAAA;AAAA;AAAA;AAAA;AAiCnE,CAjCD;;eAmCeb,e","sourcesContent":["import { Transforms, Editor } from \"slate\";\nimport { get } from \"../utils\";\n\nconst toggleParentRow = ({ table, editor, selected, row, type }) => {\n  const { selection } = editor;\n  if (!table || !selection) return;\n  const nodes = Editor.nodes(editor, {\n    at: table[1],\n    match: (n) => n.type === \"table_row\",\n  });\n  const isParent = type === \"parent\";\n  if (row) {\n    const [, path] = row;\n    if (isParent) {\n      if (!selected) {\n        Transforms.setNodes(editor, { subParent: selected }, { at: path });\n      }\n      Transforms.setNodes(editor, { parent: selected }, { at: path });\n    } else {\n      Transforms.setNodes(editor, { subParent: selected }, { at: path });\n    }\n  }\n  for (const node of nodes) {\n    const [rows, path] = node;\n    if (!get(rows, \"children\", []).length) return;\n    for (const cell of rows.children) {\n      if (get(cell, \"selectedCell\")) {\n        const parentRow = get(rows, \"parent\", null);\n        if (parentRow && get(parentRow, \"id\") !== get(selected, \"id\")) {\n          Transforms.setNodes(editor, { subParent: selected }, { at: path });\n        } else {\n          Transforms.setNodes(editor, { parent: selected }, { at: path });\n        }\n      }\n    }\n  }\n};\n\nexport default toggleParentRow;\n"],"file":"toggleParentRow.js"}