{"version":3,"sources":["../../src/commands/removeColumn.js"],"names":["removeColumn","table","editor","selection","gridTable","getCol","xIndex","length","Editor","edges","start","end","nodes","match","n","type","at","startNode","endNode","col","cell","key","startCol","endCol","xLeft","path","xRight","topLeftCol","bottomRight","Transforms","setSelection","anchor","point","originPath","focus","splitedGridTable","removedCells","reduce","p","c","cells","slice","forEach","removeNodes","children","findIndex","rows","row","minRowHeight","Infinity","rowspan","setNodes","removedGridTable","contentAfterRemove","string","idx","allColumnIsReal","minColWidth","j","isReal","colspan"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport { Editor, Transforms } from 'slate';\nimport { splitedTable } from '../selection';\nimport { splitCell } from './splitCell';\n\nconst removeColumn = (table, editor) => {\n  const { selection } = editor;\n  if (!selection || !table) return;\n\n  const { gridTable, getCol } = splitedTable(editor, table);\n  const xIndex = table[1].length + 1;\n\n  const [start, end] = Editor.edges(editor, selection);\n  const [startNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: start,\n  });\n\n  const [endNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: end,\n  });\n\n  const [startCol] = getCol((col) => col.cell.key === startNode[0].key);\n  const [endCol] = getCol((col) => col.cell.key === endNode[0].key);\n\n  const xLeft = startCol.path[xIndex];\n  const xRight = endCol.path[xIndex];\n\n  const topLeftCol = gridTable[0][xLeft];\n  const bottomRight = gridTable[gridTable.length - 1][xRight];\n\n  Transforms.setSelection(editor, {\n    anchor: Editor.point(editor, topLeftCol.originPath),\n    focus: Editor.point(editor, bottomRight.originPath),\n  });\n\n  splitCell(table, editor);\n\n  const { gridTable: splitedGridTable } = splitedTable(editor, table);\n\n  const removedCells = splitedGridTable.reduce((p, c) => {\n    const cells = c.slice(xLeft, xRight + 1);\n    return [...p, ...cells];\n  }, []);\n\n  removedCells.forEach((cell) => {\n    Transforms.removeNodes(editor, {\n      at: table[1],\n      match: n => n.key === cell.cell.key,\n    });\n  });\n\n  Transforms.removeNodes(editor, {\n    at: table[1],\n    match: n => {\n      if (n.type !== 'table_row') {\n        return false;\n      }\n\n      if (\n        !n.children ||\n        n.children.findIndex((cell) => cell.type === 'table_cell') < 0\n      ) {\n        return true;\n      }\n\n      return false;\n    },\n  });\n\n  const rows = Editor.nodes(editor, {\n    at: table[1],\n    match: n => n.type === 'table_row',\n  });\n\n  for (const row of rows) {\n    let minRowHeight = Infinity;\n    row[0].children.forEach((cell) => {\n      const { rowspan = 1 } = cell;\n      if (rowspan < minRowHeight) {\n        minRowHeight = rowspan;\n      }\n    });\n\n    if (minRowHeight > 1 && minRowHeight < Infinity) {\n      row[0].children.forEach((cell) => {\n        Transforms.setNodes(\n          editor,\n          {\n            rowspan: (cell.rowspan || 1) - minRowHeight + 1,\n          },\n          {\n            at: table[1],\n            match: n => n.key === cell.key,\n          },\n        );\n      });\n    }\n  }\n\n  const { gridTable: removedGridTable } = splitedTable(editor, table);\n\n  if (!removedGridTable.length) {\n    const contentAfterRemove = Editor.string(editor, table[1]);\n\n    if (!contentAfterRemove) {\n      Transforms.removeNodes(editor, {\n        at: table[1],\n      });\n    }\n\n    return;\n  }\n\n  for (let idx = 0; idx < removedGridTable[0].length; idx += 1) {\n    let allColumnIsReal = true;\n    let minColWidth = Infinity;\n\n    for (let j = 0; j < removedGridTable.length; j += 1) {\n      if (!removedGridTable[j][idx].isReal) {\n        allColumnIsReal = false;\n      } else {\n        const { colspan = 1 } = removedGridTable[j][idx].cell;\n        if (colspan < minColWidth) {\n          minColWidth = colspan;\n        }\n      }\n    }\n\n    if (allColumnIsReal && minColWidth < Infinity && minColWidth > 1) {\n      for (let j = 0; j < removedGridTable.length; j += 1) {\n        const { cell } = removedGridTable[j][idx];\n        Transforms.setNodes(\n          editor,\n          {\n            colspan: (cell.colspan || 1) - minColWidth + 1,\n          },\n          {\n            at: table[1],\n            match: n => n.key === cell.key,\n          },\n        );\n      }\n    }\n  }\n}\n\nexport default removeColumn;\n"],"file":"removeColumn.js"}