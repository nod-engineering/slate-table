{"version":3,"sources":["../../src/commands/removeColumn.js"],"names":["removeColumn","table","editor","selection","path","previous","Editor","at","children","length","Transforms","insertNodes","type","text","nextPath","Path","next","nextNode","Node","get","removeNodes","gridTable","getCol","xIndex","edges","start","end","nodes","match","n","startNode","endNode","col","cell","key","startCol","endCol","xLeft","xRight","topLeftCol","bottomRight","setSelection","anchor","point","originPath","focus","splitedGridTable","removedCells","reduce","p","c","cells","slice","forEach","findIndex","rows","row","minRowHeight","Infinity","rowspan","setNodes","removedGridTable","contentAfterRemove","string","idx","allColumnIsReal","minColWidth","j","isReal","colspan"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport { Editor, Transforms, Path, Node } from 'slate';\nimport { splitedTable } from '../selection';\nimport splitCell from './splitCell';\n\nconst removeColumn = (table, editor) => {\n  const { selection } = editor;\n  if (!selection || !table) return;\n\n  const path = table[1];\n  const previous = Editor.previous(editor, { at: path });\n\n  if (!previous) {\n    try {\n      if (table[0].children[0].children.length < 2) {\n        Transforms.insertNodes(\n          editor,\n          { type: 'paragraph', children: [{ text: ' ' }] },\n          { at: [0, 0] },\n        );\n\n        const nextPath = Path.next(path);\n        const nextNode = Node.get(editor, nextPath);\n\n        if (nextNode && nextNode.type === 'table') {\n          Transforms.removeNodes(editor, { at: nextPath });\n        }\n\n        return;\n      }\n    } catch {}\n  }\n\n  const { gridTable, getCol } = splitedTable(editor, table);\n  const xIndex = table[1].length + 1;\n\n  const [start, end] = Editor.edges(editor, selection);\n  const [startNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: start,\n  });\n\n  const [endNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: end,\n  });\n\n  const [startCol] = getCol(col => col.cell.key === startNode[0].key);\n  const [endCol] = getCol(col => col.cell.key === endNode[0].key);\n\n  const xLeft = startCol.path[xIndex];\n  const xRight = endCol.path[xIndex];\n\n  const topLeftCol = gridTable[0][xLeft];\n  const bottomRight = gridTable[gridTable.length - 1][xRight];\n\n  Transforms.setSelection(editor, {\n    anchor: Editor.point(editor, topLeftCol.originPath),\n    focus: Editor.point(editor, bottomRight.originPath),\n  });\n\n  splitCell(table, editor);\n\n  const { gridTable: splitedGridTable } = splitedTable(editor, table);\n\n  const removedCells = splitedGridTable.reduce((p, c) => {\n    const cells = c.slice(xLeft, xRight + 1);\n    return [...p, ...cells];\n  }, []);\n\n  removedCells.forEach(cell => {\n    Transforms.removeNodes(editor, {\n      at: table[1],\n      match: n => n.key === cell.cell.key,\n    });\n  });\n\n  Transforms.removeNodes(editor, {\n    at: table[1],\n    match: n => {\n      if (n.type !== 'table_row') {\n        return false;\n      }\n\n      if (!n.children || n.children.findIndex(cell => cell.type === 'table_cell') < 0) {\n        return true;\n      }\n\n      return false;\n    },\n  });\n\n  const rows = Editor.nodes(editor, {\n    at: table[1],\n    match: n => n.type === 'table_row',\n  });\n\n  for (const row of rows) {\n    let minRowHeight = Infinity;\n    row[0].children.forEach(cell => {\n      const { rowspan = 1 } = cell;\n      if (rowspan < minRowHeight) {\n        minRowHeight = rowspan;\n      }\n    });\n\n    if (minRowHeight > 1 && minRowHeight < Infinity) {\n      row[0].children.forEach(cell => {\n        Transforms.setNodes(\n          editor,\n          {\n            rowspan: (cell.rowspan || 1) - minRowHeight + 1,\n          },\n          {\n            at: table[1],\n            match: n => n.key === cell.key,\n          },\n        );\n      });\n    }\n  }\n\n  const { gridTable: removedGridTable } = splitedTable(editor, table);\n\n  if (!removedGridTable.length) {\n    const contentAfterRemove = Editor.string(editor, table[1]);\n\n    if (!contentAfterRemove) {\n      Transforms.removeNodes(editor, {\n        at: table[1],\n      });\n    }\n\n    return;\n  }\n\n  for (let idx = 0; idx < removedGridTable[0].length; idx += 1) {\n    let allColumnIsReal = true;\n    let minColWidth = Infinity;\n\n    for (let j = 0; j < removedGridTable.length; j += 1) {\n      if (!removedGridTable[j][idx].isReal) {\n        allColumnIsReal = false;\n      } else {\n        const { colspan = 1 } = removedGridTable[j][idx].cell;\n        if (colspan < minColWidth) {\n          minColWidth = colspan;\n        }\n      }\n    }\n\n    if (allColumnIsReal && minColWidth < Infinity && minColWidth > 1) {\n      for (let j = 0; j < removedGridTable.length; j += 1) {\n        const { cell } = removedGridTable[j][idx];\n        Transforms.setNodes(\n          editor,\n          {\n            colspan: (cell.colspan || 1) - minColWidth + 1,\n          },\n          {\n            at: table[1],\n            match: n => n.key === cell.key,\n          },\n        );\n      }\n    }\n  }\n};\n\nexport default removeColumn;\n"],"file":"removeColumn.js"}