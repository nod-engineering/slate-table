{"version":3,"sources":["../../src/commands/removeRow.js"],"names":["removeRow","table","editor","selection","gridTable","getCol","yIndex","length","Editor","edges","start","end","nodes","match","n","type","at","startNode","endNode","col","cell","key","startCol","endCol","yTop","path","yBottom","topLeftCol","bottomRight","Transforms","setSelection","anchor","point","originPath","focus","splitedGridTable","removeCols","slice","reduce","p","c","forEach","removeNodes","children","findIndex","string"],"mappings":"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","sourcesContent":["/* eslint-disable no-debugger */\nimport { Transforms, Editor } from 'slate';\nimport { splitedTable } from '../selection';\nimport { splitCell } from './splitCell';\n\nconst removeRow = (table, editor) => {\n  const { selection } = editor;\n  if (!selection || !table) return;\n\n  const { gridTable, getCol } = splitedTable(editor, table);\n  const yIndex = table[1].length;\n\n  const [start, end] = Editor.edges(editor, selection);\n  const [startNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: start,\n  });\n\n  const [endNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: end,\n  });\n\n  const [startCol] = getCol((col) => col.cell.key === startNode[0].key);\n  const [endCol] = getCol((col) => col.cell.key === endNode[0].key);\n\n  const yTop = startCol.path[yIndex];\n  const yBottom = endCol.path[yIndex];\n\n  const topLeftCol = gridTable[yTop][0];\n  const bottomRight = gridTable[yBottom][gridTable[yBottom].length - 1];\n\n  Transforms.setSelection(editor, {\n    anchor: Editor.point(editor, topLeftCol.originPath),\n    focus: Editor.point(editor, bottomRight.originPath),\n  });\n\n  splitCell(table, editor);\n\n  const { gridTable: splitedGridTable } = splitedTable(editor, table);\n\n  const removeCols = splitedGridTable\n    .slice(yTop, yBottom + 1)\n    .reduce((p, c) => [...p, ...c], []);\n\n  removeCols.forEach((col) => {\n    Transforms.removeNodes(editor, {\n      at: table[1],\n      match: n => n.key === col.cell.key,\n    });\n  });\n\n  Transforms.removeNodes(editor, {\n    at: table[1],\n    match: n => {\n      if (n.type !== 'table_row') {\n        return false;\n      }\n\n      if (\n        !n.children ||\n        n.children.findIndex((cell) => cell.type === 'table_cell') < 0\n      ) {\n        return true;\n      }\n\n      return false;\n    },\n  });\n\n  if (!Editor.string(editor, table[1])) {\n    Transforms.removeNodes(editor, {\n      at: table[1],\n    });\n  }\n}\n\nexport default removeRow;"],"file":"removeRow.js"}