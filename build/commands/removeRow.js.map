{"version":3,"sources":["../../src/commands/removeRow.js"],"names":["removeRow","table","editor","selection","path","previous","Editor","at","children","length","Transforms","insertNodes","type","text","nextPath","Path","next","nextNode","removeNodes","gridTable","getCol","yIndex","edges","start","end","nodes","match","n","startNode","endNode","col","cell","key","startCol","endCol","yTop","yBottom","topLeftCol","bottomRight","setSelection","anchor","point","originPath","focus","rowsToDelete","slice","forEach","row"],"mappings":"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","sourcesContent":["/* eslint-disable no-debugger */\nimport { Transforms, Editor, Path } from 'slate';\nimport { splitedTable } from '../selection';\nimport splitCell from './splitCell';\nimport { getNode } from '../utils';\n\nconst removeRow = (table, editor) => {\n  const { selection } = editor;\n  if (!selection || !table) return;\n\n  const path = table[1];\n\n  const previous = Editor.previous(editor, { at: path });\n\n  if (!previous) {\n    if (table[0].children.length < 2) {\n      Transforms.insertNodes(\n        editor,\n        { type: 'paragraph', children: [{ text: '' }] },\n        { at: [0, 0] },\n      );\n\n      const nextPath = path && path.length && Path.next(path);\n      const nextNode = nextPath && getNode(editor, nextPath);\n\n      if (nextNode && nextNode.type === 'table') {\n        Transforms.removeNodes(editor, { at: nextPath });\n      }\n\n      return;\n    }\n  }\n\n  const { gridTable, getCol } = splitedTable(editor, table);\n\n  const yIndex = table[1].length;\n\n  const [start, end] = Editor.edges(editor, selection);\n  const [startNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: start,\n  });\n\n  const [endNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: end,\n  });\n\n  if (!startNode || !endNode) return;\n\n  const [startCol] = getCol(col => col.cell.key === startNode[0].key);\n  const [endCol] = getCol(col => col.cell.key === endNode[0].key);\n\n  const yTop = startCol.path[yIndex];\n  const yBottom = endCol.path[yIndex];\n\n  const topLeftCol = gridTable[yTop][0];\n  const bottomRight = gridTable[yBottom][gridTable[yBottom].length - 1];\n\n  Transforms.setSelection(editor, {\n    anchor: Editor.point(editor, topLeftCol.originPath),\n    focus: Editor.point(editor, bottomRight.originPath),\n  });\n\n  splitCell(table, editor);\n\n  const rowsToDelete = table[0].children.slice(yTop, yBottom + 1);\n\n  rowsToDelete.forEach(row => {\n    Transforms.removeNodes(editor, {\n      at: table[1],\n      match: n => n.key === row.key,\n    });\n  });\n};\n\nexport default removeRow;\n"],"file":"removeRow.js"}