{"version":3,"sources":["../../src/commands/removeRow.js"],"names":["removeRow","table","editor","selection","path","previous","Editor","at","children","length","Transforms","insertNodes","type","text","nextPath","Path","next","nextNode","Node","get","removeNodes","gridTable","getCol","yIndex","edges","start","end","nodes","match","n","startNode","endNode","col","cell","key","startCol","endCol","yTop","yBottom","topLeftCol","bottomRight","setSelection","anchor","point","originPath","focus","splitedGridTable","removeCols","slice","reduce","p","c","forEach","findIndex"],"mappings":"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","sourcesContent":["/* eslint-disable no-debugger */\nimport { Transforms, Editor, Path, Node } from 'slate';\nimport { splitedTable } from '../selection';\nimport splitCell from './splitCell';\n\nconst removeRow = (table, editor) => {\n  const { selection } = editor;\n  if (!selection || !table) return;\n\n  const path = table[1];\n  const previous = Editor.previous(editor, { at: path });\n\n  if (!previous) {\n    try {\n      if (table[0].children.length < 2) {\n        Transforms.insertNodes(\n          editor,\n          { type: 'paragraph', children: [{ text: ' ' }] },\n          { at: [0, 0] },\n        );\n\n        const nextPath = Path.next(path);\n        const nextNode = Node.get(editor, nextPath);\n\n        if (nextNode && nextNode.type === 'table') {\n          Transforms.removeNodes(editor, { at: nextPath });\n        }\n\n        return;\n      }\n    } catch {}\n  }\n\n  const { gridTable, getCol } = splitedTable(editor, table);\n  const yIndex = table[1].length;\n\n  const [start, end] = Editor.edges(editor, selection);\n  const [startNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: start,\n  });\n\n  const [endNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: end,\n  });\n\n  const [startCol] = getCol(col => col.cell.key === startNode[0].key);\n  const [endCol] = getCol(col => col.cell.key === endNode[0].key);\n\n  const yTop = startCol.path[yIndex];\n  const yBottom = endCol.path[yIndex];\n\n  const topLeftCol = gridTable[yTop][0];\n  const bottomRight = gridTable[yBottom][gridTable[yBottom].length - 1];\n\n  Transforms.setSelection(editor, {\n    anchor: Editor.point(editor, topLeftCol.originPath),\n    focus: Editor.point(editor, bottomRight.originPath),\n  });\n\n  splitCell(table, editor);\n\n  const { gridTable: splitedGridTable } = splitedTable(editor, table);\n\n  const removeCols = splitedGridTable.slice(yTop, yBottom + 1).reduce((p, c) => [...p, ...c], []);\n\n  removeCols.forEach(col => {\n    Transforms.removeNodes(editor, {\n      at: table[1],\n      match: n => n.key === col.cell.key,\n    });\n  });\n\n  Transforms.removeNodes(editor, {\n    at: table[1],\n    match: n => {\n      if (n.type !== 'table_row') {\n        return false;\n      }\n\n      if (!n.children || n.children.findIndex(cell => cell.type === 'table_cell') < 0) {\n        return true;\n      }\n\n      return false;\n    },\n  });\n\n  if (gridTable.length === 1) {\n    Transforms.removeNodes(editor, {\n      at: table[1],\n    });\n  }\n};\n\nexport default removeRow;\n"],"file":"removeRow.js"}