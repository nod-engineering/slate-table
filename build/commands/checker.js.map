{"version":3,"sources":["../../src/commands/checker.js"],"names":["checker","table","editor","direction","selection","Editor","edges","start","nodes","match","n","type","at","startNode","key","gridTable","selectedTable","startNodeColspan","colspan","startNodeRowspan","rowspan","hasMergedCells","selectedTableLen","length","nextNodeColspan","cell","undefined","nextNodeRowspan"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAgBC,SAAhB,EAA8B;AAC1C,MAAI,CAACF,KAAD,IAAU,CAACC,MAAM,CAACE,SAAtB,EAAiC;;AADS,sBAE1BC,cAAOC,KAAP,CAAaJ,MAAb,EAAqBA,MAAM,CAACE,SAA5B,CAF0B;AAAA;AAAA,MAEnCG,KAFmC;;AAAA,sBAGtBF,cAAOG,KAAP,CAAaN,MAAb,EAAqB;AACvCO,IAAAA,KAAK,EAAE,eAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,IAAF,KAAW,YAAf;AAAA,KAD+B;AAEvCC,IAAAA,EAAE,EAAEL;AAFmC,GAArB,CAHsB;AAAA;AAAA,MAGnCM,SAHmC;;AAAA,MAOlCC,GAPkC,GAO1BD,SAAS,CAAC,CAAD,CAPiB,CAOlCC,GAPkC;;AAAA,sBAQpB,6BAAaZ,MAAb,EAAqBD,KAArB,EAA4Ba,GAA5B,CARoB;AAAA,MAQlCC,SARkC,iBAQlCA,SARkC;;AAS1C,MAAMC,aAAa,GAAG,gCAAWD,SAAX,EAAsBF,SAAtB,EAAiCV,SAAjC,CAAtB;AACA,MAAMc,gBAAgB,GAAGJ,SAAS,CAAC,CAAD,CAAT,CAAaK,OAAb,IAAwB,CAAjD;AACA,MAAMC,gBAAgB,GAAGN,SAAS,CAAC,CAAD,CAAT,CAAaO,OAAb,IAAwB,CAAjD;AACA,MAAMC,cAAc,GAAGJ,gBAAgB,GAAG,CAAnB,IAAwBE,gBAAgB,GAAG,CAAlE;;AACA,MAAIhB,SAAS,KAAK,MAAlB,EAA0B;AACtB,QAAMmB,gBAAgB,GAAGN,aAAa,CAACO,MAAvC;AACA,QAAID,gBAAgB,GAAG,CAAnB,IAAwBH,gBAAgB,KAAKG,gBAAjD,EAAoE,OAAO,KAAP;AACpE,QAAME,eAAe,GAAGR,aAAa,CAACM,gBAAgB,GAAG,CAApB,CAAb,CAAoC,CAApC,EAAuCG,IAAvC,CAA4CP,OAA5C,IAAuDQ,SAA/E;AACA,QAAIT,gBAAgB,KAAK,CAArB,IAA0BO,eAAe,KAAKE,SAAlD,EAA6D,OAAO,IAAP;AAC7D,QAAIT,gBAAgB,KAAKO,eAAzB,EAA0C,OAAO,KAAP;AAC1C,WAAO,IAAP;AACH;;AACD,MAAIrB,SAAS,KAAK,OAAlB,EAA2B;AACvB,QAAMmB,iBAAgB,GAAGN,aAAa,CAAC,CAAD,CAAb,CAAiBO,MAA1C;AACA,QAAID,iBAAgB,GAAG,CAAnB,IAAwBL,gBAAgB,KAAKK,iBAAjD,EAAoE,OAAO,KAAP;AACpE,QAAMK,eAAe,GAAGX,aAAa,CAAC,CAAD,CAAb,CAAiBM,iBAAgB,GAAG,CAApC,EAAuCG,IAAvC,CAA4CL,OAA5C,IAAuDM,SAA/E;AACA,QAAIP,gBAAgB,KAAK,CAArB,IAA0BQ,eAAe,KAAKD,SAAlD,EAA6D,OAAO,IAAP;AAC7D,QAAIP,gBAAgB,KAAKQ,eAAzB,EAA0C,OAAO,KAAP;AAC1C,WAAO,IAAP;AACH;;AACD,MAAI,CAACxB,SAAD,IAAckB,cAAlB,EAAkC;AAC9B,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAjCD;;eAmCerB,O","sourcesContent":["/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable consistent-return */\r\nimport { Editor } from 'slate';\r\nimport { checkMerge } from './mergeSelection';\r\nimport { splitedTable } from '../selection';\r\n\r\nconst checker = (table, editor, direction) => {\r\n    if (!table || !editor.selection) return;\r\n    const [start] = Editor.edges(editor, editor.selection);\r\n    const [startNode] = Editor.nodes(editor, {\r\n      match: n => n.type === 'table_cell',\r\n      at: start,\r\n    });\r\n    const { key } = startNode[0];\r\n    const { gridTable } = splitedTable(editor, table, key);\r\n    const selectedTable = checkMerge(gridTable, startNode, direction);\r\n    const startNodeColspan = startNode[0].colspan || 1;\r\n    const startNodeRowspan = startNode[0].rowspan || 1;\r\n    const hasMergedCells = startNodeColspan > 1 || startNodeRowspan > 1;\r\n    if (direction === 'down') {\r\n        const selectedTableLen = selectedTable.length;\r\n        if (selectedTableLen < 2 || startNodeRowspan === selectedTableLen ) return false;\r\n        const nextNodeColspan = selectedTable[selectedTableLen - 1][0].cell.colspan || undefined;\r\n        if (startNodeColspan === 1 && nextNodeColspan === undefined) return true;\r\n        if (startNodeColspan !== nextNodeColspan) return false;\r\n        return true;\r\n    }\r\n    if (direction === 'right') {\r\n        const selectedTableLen = selectedTable[0].length;\r\n        if (selectedTableLen < 2 || startNodeColspan === selectedTableLen ) return false;\r\n        const nextNodeRowspan = selectedTable[0][selectedTableLen - 1].cell.rowspan || undefined;\r\n        if (startNodeRowspan === 1 && nextNodeRowspan === undefined) return true;\r\n        if (startNodeRowspan !== nextNodeRowspan) return false;\r\n        return true;\r\n    }\r\n    if (!direction && hasMergedCells) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default checker;"],"file":"checker.js"}