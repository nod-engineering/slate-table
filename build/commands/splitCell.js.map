{"version":3,"sources":["../../src/commands/splitCell.js"],"names":["splitCell","table","editor","selection","yIndex","length","xIndex","getCol","Editor","edges","start","end","nodes","match","n","type","at","startNode","endNode","cell","key","startCell","endCell","path","yStart","yEnd","xStart","xEnd","sourceCells","selectedCols","selectedCell","slice","y","x","isReal","s","sourceCell","push","filterColsObject","reduce","p","c","Object","values","forEach","col","originPath","rowspan","colspan","children","Transforms","i","j","newPath","Array","from","newCell","width","height","elements","insertNodes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAAA,MAC3BC,SAD2B,GACbD,MADa,CAC3BC,SAD2B;AAEnC,MAAI,CAACA,SAAD,IAAc,CAACF,KAAnB,EAA0B;AAE1B,MAAMG,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASI,MAAxB;AACA,MAAMC,MAAM,GAAGL,KAAK,CAAC,CAAD,CAAL,CAASI,MAAT,GAAkB,CAAjC;;AALmC,sBAOhB,6BAAaH,MAAb,EAAqBD,KAArB,CAPgB;AAAA,MAO3BM,MAP2B,iBAO3BA,MAP2B;;AAAA,sBASdC,cAAOC,KAAP,CAAaP,MAAb,EAAqBC,SAArB,CATc;AAAA;AAAA,MAS5BO,KAT4B;AAAA,MASrBC,GATqB;;AAAA,sBAUfH,cAAOI,KAAP,CAAaV,MAAb,EAAqB;AACvCW,IAAAA,KAAK,EAAE,eAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,IAAF,KAAW,YAAf;AAAA,KAD+B;AAEvCC,IAAAA,EAAE,EAAEN;AAFmC,GAArB,CAVe;AAAA;AAAA,MAU5BO,SAV4B;;AAAA,uBAejBT,cAAOI,KAAP,CAAaV,MAAb,EAAqB;AACrCW,IAAAA,KAAK,EAAE,eAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,IAAF,KAAW,YAAf;AAAA,KAD6B;AAErCC,IAAAA,EAAE,EAAEL;AAFiC,GAArB,CAfiB;AAAA;AAAA,MAe5BO,OAf4B;;AAoBnC,MAAI,CAACD,SAAD,IAAc,CAACC,OAAnB,EAA4B;;AApBO,gBAsBfX,MAAM,CAAC,UAACO,CAAD;AAAA,WAAOA,CAAC,CAACK,IAAF,CAAOC,GAAP,KAAeH,SAAS,CAAC,CAAD,CAAT,CAAaG,GAAnC;AAAA,GAAD,CAtBS;AAAA;AAAA,MAsB5BC,SAtB4B;;AAAA,iBAuBjBd,MAAM,CAAC,UAACO,CAAD;AAAA,WAAOA,CAAC,CAACK,IAAF,CAAOC,GAAP,KAAeF,OAAO,CAAC,CAAD,CAAP,CAAWE,GAAjC;AAAA,GAAD,CAvBW;AAAA;AAAA,MAuB5BE,OAvB4B;;AAAA,aAyBZ,CAACD,SAAS,CAACE,IAAV,CAAenB,MAAf,CAAD,EAAyBkB,OAAO,CAACC,IAAR,CAAanB,MAAb,CAAzB,CAzBY;AAAA,MAyB5BoB,MAzB4B;AAAA,MAyBpBC,IAzBoB;AAAA,cA0BZ,CAACJ,SAAS,CAACE,IAAV,CAAejB,MAAf,CAAD,EAAyBgB,OAAO,CAACC,IAAR,CAAajB,MAAb,CAAzB,CA1BY;AAAA,MA0B5BoB,MA1B4B;AAAA,MA0BpBC,IA1BoB;AA4BnC,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,YAAY,GAAGtB,MAAM,CAAC,UAACO,CAAD,EAAO;AACjC,QAAIA,CAAC,CAACK,IAAF,CAAOW,YAAX,EAAyB;AACvB,aAAO,IAAP;AACD;;AAHgC,wBAKlBhB,CAAC,CAACS,IAAF,CAAOQ,KAAP,CAAa3B,MAAb,EAAqBE,MAAM,GAAG,CAA9B,CALkB;AAAA;AAAA,QAK1B0B,CAL0B;AAAA,QAKvBC,CALuB;;AAMjC,QAAID,CAAC,IAAIR,MAAL,IAAeQ,CAAC,IAAIP,IAApB,IAA4BQ,CAAC,IAAIP,MAAjC,IAA2CO,CAAC,IAAIN,IAApD,EAA0D;AACxD,UAAI,CAACb,CAAC,CAACoB,MAAP,EAAe;AAAA,uBACQ3B,MAAM,CACzB,UAAC4B,CAAD;AAAA,iBAAOA,CAAC,CAACD,MAAF,IAAYC,CAAC,CAAChB,IAAF,CAAOC,GAAP,KAAeN,CAAC,CAACK,IAAF,CAAOC,GAAzC;AAAA,SADyB,CADd;AAAA;AAAA,YACNgB,UADM;;AAIbR,QAAAA,WAAW,CAACS,IAAZ,CAAiBD,UAAjB;AACD;;AACD,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAjB0B,CAA3B;AAmBAP,EAAAA,YAAY,CAACQ,IAAb,OAAAR,YAAY,EAASD,WAAT,CAAZ;AAEA,MAAMU,gBAAgB,GAAGT,YAAY,CAACU,MAAb,CACvB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACR,QAAIA,CAAC,CAACP,MAAN,EAAc;AACZ;AACAM,MAAAA,CAAC,CAACC,CAAC,CAACtB,IAAF,CAAOC,GAAR,CAAD,GAAgBqB,CAAhB;AACD;;AACD,WAAOD,CAAP;AACD,GAPsB,EAQvB,EARuB,CAAzB;AAWAE,EAAAA,MAAM,CAACC,MAAP,CAAcL,gBAAd,EAAgCM,OAAhC,CAAwC,UAACC,GAAD,EAAS;AAAA,QACvC1B,IADuC,GACV0B,GADU,CACvC1B,IADuC;AAAA,QACjCe,MADiC,GACVW,GADU,CACjCX,MADiC;AAAA,QACzBY,UADyB,GACVD,GADU,CACzBC,UADyB;AAAA,wBAEA3B,IAFA,CAEvC4B,OAFuC;AAAA,QAEvCA,OAFuC,8BAE7B,CAF6B;AAAA,wBAEA5B,IAFA,CAE1B6B,OAF0B;AAAA,QAE1BA,OAF0B,8BAEhB,CAFgB;AAAA,QAEbC,QAFa,GAEA9B,IAFA,CAEb8B,QAFa;;AAI/C,QAAIf,MAAM,KAAKa,OAAO,KAAK,CAAZ,IAAiBC,OAAO,KAAK,CAAlC,CAAV,EAAgD;AAC9CE,kCAAkBhD,MAAlB,EAA0B;AACxBc,QAAAA,EAAE,EAAE8B;AADoB,OAA1B;;AAIA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAApB,EAA6BI,CAAC,IAAI,CAAlC,EAAqC;AACnC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAApB,EAA6BI,CAAC,IAAI,CAAlC,EAAqC;AACnC,cAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAWT,UAAX,CAAhB;AACAO,UAAAA,OAAO,CAACjD,MAAD,CAAP,IAAmB+C,CAAnB;AAEA,cAAMK,OAAO,GAAG,yBAAW;AACzBC,YAAAA,KAAK,EAAE,CADkB;AAEzBC,YAAAA,MAAM,EAAE,CAFiB;AAGzBC,YAAAA,QAAQ,EACNR,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAKJ,OAAO,GAAG,CAA3B,GAA+BC,QAAQ,CAAC,CAAD,CAAR,CAAYA,QAA3C,GAAsD;AAJ/B,WAAX,CAAhB;;AAOAC,4BAAWU,WAAX,CAAuB1D,MAAvB,EAA+BsD,OAA/B,EAAwC;AACtCxC,YAAAA,EAAE,EAAEqC;AADkC,WAAxC;AAGD;AACF;AACF;AACF,GA3BD;AA4BD,CAzFD;;eA2FerD,S","sourcesContent":["import { Transforms, Editor } from 'slate';\nimport { splitedTable } from '../selection';\nimport { createCell } from '../creator';\n\nconst splitCell = (table, editor) => {\n  const { selection } = editor;\n  if (!selection || !table) return;\n\n  const yIndex = table[1].length;\n  const xIndex = table[1].length + 1;\n\n  const { getCol } = splitedTable(editor, table);\n\n  const [start, end] = Editor.edges(editor, selection);\n  const [startNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: start,\n  });\n\n  const [endNode] = Editor.nodes(editor, {\n    match: n => n.type === 'table_cell',\n    at: end,\n  });\n\n  if (!startNode || !endNode) return;\n\n  const [startCell] = getCol((n) => n.cell.key === startNode[0].key);\n  const [endCell] = getCol((n) => n.cell.key === endNode[0].key);\n\n  const [yStart, yEnd] = [startCell.path[yIndex], endCell.path[yIndex]];\n  const [xStart, xEnd] = [startCell.path[xIndex], endCell.path[xIndex]];\n\n  const sourceCells = [];\n  const selectedCols = getCol((n) => {\n    if (n.cell.selectedCell) {\n      return true;\n    }\n\n    const [y, x] = n.path.slice(yIndex, xIndex + 1);\n    if (y >= yStart && y <= yEnd && x >= xStart && x <= xEnd) {\n      if (!n.isReal) {\n        const [sourceCell] = getCol(\n          (s) => s.isReal && s.cell.key === n.cell.key,\n        );\n        sourceCells.push(sourceCell);\n      }\n      return true;\n    }\n\n    return false;\n  });\n\n  selectedCols.push(...sourceCells);\n\n  const filterColsObject = selectedCols.reduce(\n    (p, c) => {\n      if (c.isReal) {\n        // eslint-disable-next-line no-param-reassign\n        p[c.cell.key] = c;\n      }\n      return p;\n    },\n    {},\n  );\n\n  Object.values(filterColsObject).forEach((col) => {\n    const { cell, isReal, originPath } = col;\n    const { rowspan = 1, colspan = 1, children } = cell;\n\n    if (isReal && (rowspan !== 1 || colspan !== 1)) {\n      Transforms.delete(editor, {\n        at: originPath,\n      });\n\n      for (let i = 0; i < rowspan; i += 1) {\n        for (let j = 0; j < colspan; j += 1) {\n          const newPath = Array.from(originPath);\n          newPath[yIndex] += i;\n\n          const newCell = createCell({\n            width: 0,\n            height: 0,\n            elements:\n              i === 0 && j === colspan - 1 ? children[0].children : null,\n          });\n\n          Transforms.insertNodes(editor, newCell, {\n            at: newPath,\n          });\n        }\n      }\n    }\n  });\n}\n\nexport default splitCell;\n"],"file":"splitCell.js"}