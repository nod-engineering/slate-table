{"version":3,"sources":["../src/withTable.js"],"names":["PreserveSpaceAfter","Set","PreserveSpaceBefore","insertParagraph","editor","at","text","Transforms","insertNodes","type","children","maybePreserveSpace","entry","node","path","preserved","has","next","Editor","Path","length","prev","previous","tablePlugin","addMark","removeMark","deleteBackward","deleteFragment","key","value","selection","lastSelection","selectedCells","nodes","match","n","selectedCell","isTable","cell","content","string","setSelection","range","select","removeNodes","Range","isCollapsed","isInTable","above","start","isStart","currCell","withTable","normalizeNode"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-param-reassign */\r\nimport { Editor, Transforms, Path, Range } from 'slate';\r\nimport { createContent } from './creator';\r\nimport { isInSameTable } from './utils';\r\n\r\nconst PreserveSpaceAfter = new Set(['table']);\r\nconst PreserveSpaceBefore = new Set(['table']);\r\n\r\nconst insertParagraph = (\r\n  editor,\r\n  at,\r\n  text = '',\r\n) => {\r\n  Transforms.insertNodes(\r\n    editor,\r\n    {\r\n      type: 'paragraph',\r\n      children: [{ text }],\r\n    },\r\n    {\r\n      at,\r\n    },\r\n  );\r\n};\r\n\r\nconst maybePreserveSpace = (\r\n  editor,\r\n  entry,\r\n) => {\r\n  const [node, path] = entry;\r\n  const { type } = node;\r\n  let preserved = false;\r\n\r\n  if (PreserveSpaceAfter.has(type)) {\r\n    const next = Editor.next(editor, { at: path });\r\n    if (!next || PreserveSpaceBefore.has(next[0].type)) {\r\n      insertParagraph(editor, Path.next(path));\r\n      preserved = true;\r\n    }\r\n  }\r\n\r\n  if (PreserveSpaceBefore.has(type)) {\r\n    if (path[path.length - 1] === 0) {\r\n      insertParagraph(editor, path);\r\n      preserved = true;\r\n    } else {\r\n      const prev = Editor.previous(editor, { at: path });\r\n      if (!prev || PreserveSpaceAfter.has(prev[0].type)) {\r\n        insertParagraph(editor, path);\r\n        preserved = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return preserved;\r\n};\r\n\r\nconst tablePlugin = (editor) => {\r\n  const { addMark, removeMark, deleteBackward, deleteFragment } = editor;\r\n\r\n  editor.addMark = (key, value) => {\r\n    if (editor.selection) {\r\n      const lastSelection = editor.selection;\r\n\r\n      const selectedCells = Editor.nodes(editor, {\r\n        match: n => n.selectedCell,\r\n        at: [],\r\n      });\r\n\r\n      let isTable = false;\r\n\r\n      for (const cell of selectedCells) {\r\n        if (!isTable) {\r\n          isTable = true;\r\n        }\r\n\r\n        const [content] = Editor.nodes(editor, {\r\n          match: n => n.type === 'table_content',\r\n          at: cell[1],\r\n        });\r\n\r\n        if (Editor.string(editor, content[1]) !== '') {\r\n          Transforms.setSelection(editor, Editor.range(editor, cell[1]));\r\n          addMark(key, value);\r\n        }\r\n      }\r\n\r\n      if (isTable) {\r\n        Transforms.select(editor, lastSelection);\r\n        return;\r\n      }\r\n    }\r\n\r\n    addMark(key, value);\r\n  };\r\n\r\n  editor.removeMark = key => {\r\n    if (editor.selection) {\r\n      const lastSelection = editor.selection;\r\n      const selectedCells = Editor.nodes(editor, {\r\n        match: n => n.selectedCell,\r\n        at: [],\r\n      });\r\n\r\n      let isTable = false;\r\n      for (const cell of selectedCells) {\r\n        if (!isTable) {\r\n          isTable = true;\r\n        }\r\n\r\n        const [content] = Editor.nodes(editor, {\r\n          match: n => n.type === 'table_content',\r\n          at: cell[1],\r\n        });\r\n\r\n        if (Editor.string(editor, content[1]) !== '') {\r\n          Transforms.setSelection(editor, Editor.range(editor, cell[1]));\r\n          removeMark(key);\r\n        }\r\n      }\r\n\r\n      if (isTable) {\r\n        Transforms.select(editor, lastSelection);\r\n        return;\r\n      }\r\n    }\r\n    removeMark(key);\r\n  };\r\n\r\n  editor.deleteFragment = (...args) => {\r\n    if (editor.selection && isInSameTable(editor)) {\r\n      const selectedCells = Editor.nodes(editor, {\r\n        match: n => n.selectedCell,\r\n      });\r\n\r\n      for (const cell of selectedCells) {\r\n        Transforms.setSelection(editor, Editor.range(editor, cell[1]));\r\n\r\n        const [content] = Editor.nodes(editor, {\r\n          match: n => n.type === 'table_content',\r\n        });\r\n\r\n        Transforms.insertNodes(editor, createContent(), { at: content[1] });\r\n        Transforms.removeNodes(editor, { at: Path.next(content[1]) });\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    Transforms.removeNodes(editor, {\r\n      match: n => n.type === 'table',\r\n    });\r\n\r\n    deleteFragment(...args);\r\n  };\r\n\r\n  editor.deleteBackward = (...args) => {\r\n    const { selection } = editor;\r\n\r\n    if (selection && Range.isCollapsed(selection)) {\r\n      const isInTable = Editor.above(editor, {\r\n        match: n => n.type === 'table',\r\n      });\r\n\r\n      if (isInTable) {\r\n        const start = Editor.start(editor, selection);\r\n        const isStart = Editor.isStart(editor, start, selection);\r\n\r\n        const currCell = Editor.above(editor, {\r\n          match: n => n.type === 'table_cell',\r\n        });\r\n\r\n        if (isStart && currCell && !Editor.string(editor, currCell[1])) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    deleteBackward(...args);\r\n  };\r\n\r\n  return editor;\r\n};\r\n\r\n\r\nconst withTable = (editor) => {\r\n  const { normalizeNode } = editor;\r\n\r\n  editor.normalizeNode = entry => {\r\n    if (maybePreserveSpace(editor, entry)) return;\r\n\r\n    normalizeNode(entry);\r\n  };\r\n\r\n  return tablePlugin(editor);\r\n};\r\n\r\nexport default withTable;\r\n"],"file":"withTable.js"}